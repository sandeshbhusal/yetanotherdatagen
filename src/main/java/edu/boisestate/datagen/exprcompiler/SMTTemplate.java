package edu.boisestate.datagen.exprcompiler;

public class SMTTemplate {
    public static String getTemplate(String[] variables, String conjunctionFirst, String conjunctionSecond) {
        String variableList = buildVariableList(variables);

        StringBuilder sb = new StringBuilder();

        sb.append(";; Autogenerated SMTLib file by Datagen.\n");
        sb.append(";; DO NOT MODIFY.\n\n");
        sb.append("(set-logic ALL)\n\n");

        sb.append("(define-fun min2 ((x Int) (y Int)) Int\n");
        sb.append("    (ite (< x y) x y))\n\n");

        sb.append("(define-fun max2 ((x Int) (y Int)) Int\n");
        sb.append("    (ite (> x y) x y))\n\n");

        sb.append("(define-fun-rec pow ((x Int) (n Int)) Int\n");
        sb.append("    (ite (= n 0)\n");
        sb.append("        1\n");
        sb.append("        (* x (pow x (- n 1)))))\n\n");

        sb.append("(define-fun first (\n");
        sb.append(variableList);
        sb.append("    ) Bool\n\n");
        sb.append("    ").append(conjunctionFirst).append("\n");
        sb.append(")\n\n");

        sb.append("(define-fun second (\n");
        sb.append(variableList);
        sb.append("    ) Bool\n\n");
        sb.append("    ").append(conjunctionSecond).append("\n");
        sb.append(")\n\n");

        sb.append("; Check if first is a subset of second\n");
        sb.append("(push)\n");
        sb.append("(assert (forall (\n");
        sb.append(variableList);
        sb.append("    )\n\n");

        sb.append("    ( => (first\n");
        sb.append(buildVariableUsage(variables));
        sb.append("        )\n\n");
        sb.append("        (second\n");
        sb.append(buildVariableUsage(variables));
        sb.append("        )\n");
        sb.append("    )\n");
        sb.append("))\n");
        sb.append("(check-sat)\n");
        sb.append("(pop)\n\n");

        sb.append("; Check if second is a subset of first\n");
        sb.append("(push)\n");
        sb.append("(assert (forall (\n");
        sb.append(variableList);
        sb.append("    )\n\n");

        sb.append("    ( => (first\n");
        sb.append(buildVariableUsage(variables));
        sb.append("        )\n\n");
        sb.append("        (second\n");
        sb.append(buildVariableUsage(variables));
        sb.append("        )\n");
        sb.append("    )\n");
        sb.append("))\n");
        sb.append("(check-sat)\n");
        sb.append("(pop)\n\n");

        return sb.toString();
    }

    private static String buildVariableList(String[] variables) {
        StringBuilder sb = new StringBuilder();
        for (String variable : variables) {
            sb.append("    ( ").append(variable).append(" Int )\n");
        }
        return sb.toString();
    }

    private static String buildVariableUsage(String[] variables) {
        StringBuilder sb = new StringBuilder();
        for (String variable : variables) {
            sb.append("        ").append(variable).append("\n");
        }
        return sb.toString();
    }
}
